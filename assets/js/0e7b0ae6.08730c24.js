"use strict";(self.webpackChunkBall_Game_C_Documentation=self.webpackChunkBall_Game_C_Documentation||[]).push([[993],{2448:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>t,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"server/components","title":"Components","description":"Overview","source":"@site/docs/server/components.md","sourceDirName":"server","slug":"/server/components","permalink":"/ball-game-cpp/docs/server/components","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Components","slug":"/server/components"},"sidebar":"tutorialSidebar","previous":{"title":"Network","permalink":"/ball-game-cpp/docs/server/network"},"next":{"title":"Mechanics","permalink":"/ball-game-cpp/docs/server/mechanics"}}');var r=s(4848),l=s(8453);const o={title:"Components",slug:"/server/components"},t=void 0,d={},c=[{value:"Overview",id:"overview",level:2},{value:"1. <strong>World Component</strong>",id:"1-world-component",level:2},{value:"Purpose",id:"purpose",level:3},{value:"Attributes",id:"attributes",level:3},{value:"Responsibilities",id:"responsibilities",level:3},{value:"2. <strong>Player Component</strong>",id:"2-player-component",level:2},{value:"Purpose",id:"purpose-1",level:3},{value:"Attributes",id:"attributes-1",level:3},{value:"Responsibilities",id:"responsibilities-1",level:3},{value:"Player Behavior",id:"player-behavior",level:3},{value:"3. <strong>Cell Component</strong>",id:"3-cell-component",level:2},{value:"Purpose",id:"purpose-2",level:3},{value:"Attributes",id:"attributes-2",level:3},{value:"Responsibilities",id:"responsibilities-2",level:3},{value:"Behavior",id:"behavior",level:3},{value:"4. <strong>Pellet Component</strong>",id:"4-pellet-component",level:2},{value:"Purpose",id:"purpose-3",level:3},{value:"Attributes",id:"attributes-3",level:3},{value:"Responsibilities",id:"responsibilities-3",level:3},{value:"5. <strong>Leaderboard Component</strong>",id:"5-leaderboard-component",level:2},{value:"Purpose",id:"purpose-4",level:3},{value:"Attributes",id:"attributes-4",level:3},{value:"Responsibilities",id:"responsibilities-4",level:3},{value:"6. <strong>AI Component (Bot Logic)</strong>",id:"6-ai-component-bot-logic",level:2},{value:"Purpose",id:"purpose-5",level:3},{value:"Behavior",id:"behavior-1",level:3},{value:"Summary",id:"summary",level:2}];function a(e){const n={code:"code",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsxs)(n.p,{children:["This document provides an in-depth explanation of the core game components, including ",(0,r.jsx)(n.strong,{children:"Cell"}),", ",(0,r.jsx)(n.strong,{children:"Player"}),", ",(0,r.jsx)(n.strong,{children:"World"}),", and other essential elements. These components define the game's mechanics, interactions, and overall simulation."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h2,{id:"1-world-component",children:["1. ",(0,r.jsx)(n.strong,{children:"World Component"})]}),"\n",(0,r.jsx)(n.h3,{id:"purpose",children:"Purpose"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.strong,{children:"World"})," component represents the game space where all entities exist. It defines the world size, boundaries, and rules that apply to objects inside it."]}),"\n",(0,r.jsx)(n.h3,{id:"attributes",children:"Attributes"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Size"}),": Defined by ",(0,r.jsx)(n.code,{children:"Config::Gameplay::World::SIZE"}),", determining the playable area."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Boundaries"}),": The world has fixed edges to keep entities within a defined space."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"responsibilities",children:"Responsibilities"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Defines the ",(0,r.jsx)(n.strong,{children:"playable area"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Provides ",(0,r.jsx)(n.strong,{children:"boundaries"})," for movement and component interactions."]}),"\n",(0,r.jsxs)(n.li,{children:["Ensures no component moves ",(0,r.jsx)(n.strong,{children:"out of bounds"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h2,{id:"2-player-component",children:["2. ",(0,r.jsx)(n.strong,{children:"Player Component"})]}),"\n",(0,r.jsx)(n.h3,{id:"purpose-1",children:"Purpose"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.strong,{children:"Player"})," component represents an individual user or bot controlling a set of cells. Each player has a unique ID and attributes defining their gameplay experience."]}),"\n",(0,r.jsx)(n.h3,{id:"attributes-1",children:"Attributes"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"ID"}),": Unique identifier (",(0,r.jsx)(n.code,{children:"uint32_t"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Nickname"}),": Display name of the player."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Color"}),": Player's assigned color."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"CellColor"}),": Color of the player's cells."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Viewport"}),": Camera position centered on the player's controlled area."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Mouse Position"}),": Last known normalized mouse coordinates."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Score"}),": Current game score based on cell mass."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Total Mass"}),": Sum of all controlled cells."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Cell Count"}),": Number of active cells."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"IsBot"}),": Boolean flag indicating if the player is an AI bot."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"responsibilities-1",children:"Responsibilities"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Maintains ",(0,r.jsx)(n.strong,{children:"player state"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Tracks ",(0,r.jsx)(n.strong,{children:"viewport"})," (camera movement based on player movement)."]}),"\n",(0,r.jsxs)(n.li,{children:["Stores ",(0,r.jsx)(n.strong,{children:"player's controlled cells"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Determines ",(0,r.jsx)(n.strong,{children:"player statistics"})," (mass, score, etc.)."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"player-behavior",children:"Player Behavior"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Real Players"}),": Have an associated network client (",(0,r.jsx)(n.code,{children:"asio::ip::tcp::socket"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Bots"}),": Controlled by AI and have movement logic (",(0,r.jsx)(n.code,{children:"AI::computeAIMovement()"}),")."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h2,{id:"3-cell-component",children:["3. ",(0,r.jsx)(n.strong,{children:"Cell Component"})]}),"\n",(0,r.jsx)(n.h3,{id:"purpose-2",children:"Purpose"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.strong,{children:"Cell"})," component represents the fundamental game component that players control. Cells can grow, shrink, move, and consume other cells or pellets."]}),"\n",(0,r.jsx)(n.h3,{id:"attributes-2",children:"Attributes"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"ID"}),": Unique identifier (",(0,r.jsx)(n.code,{children:"uint32_t"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Owner ID"}),": Links the cell to its controlling player."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Type"}),": ",(0,r.jsx)(n.code,{children:"PLAYER"})," or ",(0,r.jsx)(n.code,{children:"PELLET"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Position"}),": Current location in the world."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Mass"}),": Determines the size and movement speed."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Radius"}),": Calculated dynamically based on mass."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Color"}),": Cell appearance."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Marked for Deletion"}),": Flag to indicate if a cell is scheduled for removal."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"responsibilities-2",children:"Responsibilities"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Handles ",(0,r.jsx)(n.strong,{children:"movement"})," based on player input."]}),"\n",(0,r.jsxs)(n.li,{children:["Manages ",(0,r.jsx)(n.strong,{children:"growth"})," when consuming pellets or other cells."]}),"\n",(0,r.jsxs)(n.li,{children:["Implements ",(0,r.jsx)(n.strong,{children:"collision detection"})," and ",(0,r.jsx)(n.strong,{children:"cell merging"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Tracks ",(0,r.jsx)(n.strong,{children:"decay over time"})," to prevent infinite growth."]}),"\n",(0,r.jsxs)(n.li,{children:["Ensures ",(0,r.jsx)(n.strong,{children:"cells remain within world boundaries"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"behavior",children:"Behavior"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Movement"}),": Controlled via player input or AI logic."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Eating Other Cells"}),": A cell can absorb another if it's significantly larger."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Decay"}),": Over time, cells slowly lose mass to balance gameplay."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h2,{id:"4-pellet-component",children:["4. ",(0,r.jsx)(n.strong,{children:"Pellet Component"})]}),"\n",(0,r.jsx)(n.h3,{id:"purpose-3",children:"Purpose"}),"\n",(0,r.jsx)(n.p,{children:"Pellets are static food sources that provide mass when eaten by a player-controlled cell."}),"\n",(0,r.jsx)(n.h3,{id:"attributes-3",children:"Attributes"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"ID"}),": Unique identifier."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Position"}),": Randomly placed in the world."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Mass"}),": Fixed and small."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Color"}),": Assigned randomly."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"responsibilities-3",children:"Responsibilities"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Spawns randomly in the world."}),"\n",(0,r.jsx)(n.li,{children:"Gets removed when eaten."}),"\n",(0,r.jsx)(n.li,{children:"Replenishes over time."}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h2,{id:"5-leaderboard-component",children:["5. ",(0,r.jsx)(n.strong,{children:"Leaderboard Component"})]}),"\n",(0,r.jsx)(n.h3,{id:"purpose-4",children:"Purpose"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.strong,{children:"Leaderboard"})," tracks the top players based on total mass and score."]}),"\n",(0,r.jsx)(n.h3,{id:"attributes-4",children:"Attributes"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Entries"}),": A list of the highest-ranked players."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Max Entries"}),": Limits the number of displayed players."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"responsibilities-4",children:"Responsibilities"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Collects ",(0,r.jsx)(n.strong,{children:"player data"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Sorts players based on ",(0,r.jsx)(n.strong,{children:"total mass"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Sends updates to clients via ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"Send::sendUpdateLeaderboard()"})}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h2,{id:"6-ai-component-bot-logic",children:["6. ",(0,r.jsx)(n.strong,{children:"AI Component (Bot Logic)"})]}),"\n",(0,r.jsx)(n.h3,{id:"purpose-5",children:"Purpose"}),"\n",(0,r.jsx)(n.p,{children:"The AI system controls bot players, making them interact with the game world automatically."}),"\n",(0,r.jsx)(n.h3,{id:"behavior-1",children:"Behavior"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Chasing"}),": Moves toward smaller entities to consume them."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Avoiding"}),": Runs away from larger entities."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Wandering"}),": Moves randomly when no threat or food is nearby."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Pellet Hunting"}),": Prioritizes small food sources when no players are nearby."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,r.jsxs)(n.p,{children:["These components together define the ",(0,r.jsx)(n.strong,{children:"gameplay structure"}),". The ",(0,r.jsx)(n.strong,{children:"World"})," sets boundaries, ",(0,r.jsx)(n.strong,{children:"Players"})," control cells, ",(0,r.jsx)(n.strong,{children:"Cells"})," grow and interact, ",(0,r.jsx)(n.strong,{children:"Pellets"})," provide resources, and the ",(0,r.jsx)(n.strong,{children:"Leaderboard"})," tracks progress. AI ensures dynamic behavior, making the game world feel ",(0,r.jsx)(n.strong,{children:"alive"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>t});var i=s(6540);const r={},l=i.createContext(r);function o(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);