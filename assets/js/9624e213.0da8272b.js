"use strict";(self.webpackChunkBall_Game_C_Documentation=self.webpackChunkBall_Game_C_Documentation||[]).push([[801],{9717:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>h,frontMatter:()=>t,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"client/rendering","title":"Rendering","description":"The Rendering System in the client is responsible for displaying the game world, entities, and UI elements efficiently. It leverages SFML to handle real-time rendering and ensures smooth graphical updates.","source":"@site/docs/client/rendering.md","sourceDirName":"client","slug":"/client/rendering","permalink":"/ball-game-cpp/docs/client/rendering","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Rendering","slug":"/client/rendering"},"sidebar":"tutorialSidebar","previous":{"title":"Game Mechanics","permalink":"/ball-game-cpp/docs/client/game-mechanics"},"next":{"title":"Configuration","permalink":"/ball-game-cpp/docs/server/config"}}');var s=i(4848),l=i(8453);const t={title:"Rendering",slug:"/client/rendering"},d="Client Rendering System",a={},o=[{value:"Overview",id:"overview",level:2},{value:"Key Features",id:"key-features",level:3},{value:"Rendering Pipeline",id:"rendering-pipeline",level:2},{value:"Viewport System",id:"viewport-system",level:2},{value:"Implementation",id:"implementation",level:3},{value:"Entity Rendering",id:"entity-rendering",level:2},{value:"World",id:"world",level:3},{value:"Cells (Players &amp; Pellets)",id:"cells-players--pellets",level:3},{value:"Leaderboard &amp; HUD",id:"leaderboard--hud",level:3},{value:"Performance Optimizations",id:"performance-optimizations",level:2},{value:"Conclusion",id:"conclusion",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"client-rendering-system",children:"Client Rendering System"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.strong,{children:"Rendering System"})," in the client is responsible for displaying the game world, entities, and UI elements efficiently. It leverages ",(0,s.jsx)(n.strong,{children:"SFML"})," to handle real-time rendering and ensures smooth graphical updates."]}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsxs)(n.p,{children:["Rendering in the client is handled through an ",(0,s.jsx)(n.strong,{children:"SFML-based render loop"})," inside ",(0,s.jsx)(n.code,{children:"GameClient"}),". The system updates the viewport, clears the screen, draws all game entities, and finally renders the HUD before displaying the frame."]}),"\n",(0,s.jsx)(n.h3,{id:"key-features",children:"Key Features"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Efficient Entity Rendering"}),": Uses SFML to draw game objects efficiently."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Viewport Management"}),": Ensures proper zooming and movement tracking."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"HUD Rendering"}),": Draws UI elements on a separate layer."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"FPS Capping"}),": Uses vertical sync and frame rate limits to optimize performance."]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"rendering-pipeline",children:"Rendering Pipeline"}),"\n",(0,s.jsx)(n.p,{children:"The rendering process follows these steps:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Set Viewport"}),": Adjusts the view according to the player's position."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Clear Screen"}),": Clears the previous frame."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Render Game Entities"}),": Draws all in-game elements such as ",(0,s.jsx)(n.strong,{children:"cells, pellets, and the world boundary"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Render HUD"}),": Draws the leaderboard, player stats, and UI elements."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Display Frame"}),": Pushes the final frame to the screen."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-mermaid",children:"graph TD;\n    A[Set Viewport] --\x3e B[Clear Screen];\n    B --\x3e C[Render Entities];\n    C --\x3e D[Render HUD];\n    D --\x3e E[Display Frame];\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"viewport-system",children:"Viewport System"}),"\n",(0,s.jsx)(n.p,{children:"The viewport ensures smooth camera transitions and zooming, providing a dynamic perspective of the game world."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Tracking"}),": The viewport follows the player's position with interpolation."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Zooming"}),": Uses mouse wheel input to zoom in/out smoothly."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Boundary Constraints"}),": Prevents excessive movement outside the game world."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"implementation",children:"Implementation"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Viewport::applyInterpolation()"})," ensures smooth camera movement."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Zoom::setZoom()"})," dynamically adjusts the zoom level based on user input."]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"entity-rendering",children:"Entity Rendering"}),"\n",(0,s.jsx)(n.p,{children:"Game entities are drawn based on their type and properties."}),"\n",(0,s.jsx)(n.h3,{id:"world",children:"World"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"The game world"})," is drawn as a large rectangle representing the boundaries."]}),"\n",(0,s.jsxs)(n.li,{children:["Uses ",(0,s.jsx)(n.code,{children:"EntityManager::createWorld()"})," to initialize the world rendering."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"cells-players--pellets",children:"Cells (Players & Pellets)"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Cells are drawn as circles using SFML's shape system."}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"EntityManager::createCell()"})," and ",(0,s.jsx)(n.code,{children:"updateCell()"})," handle their creation and rendering updates."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"leaderboard--hud",children:"Leaderboard & HUD"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"HUD elements are rendered on top of the game view."}),"\n",(0,s.jsxs)(n.li,{children:["Uses ",(0,s.jsx)(n.strong,{children:"SFML text and shapes"})," to display leaderboard, player stats, and game information."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"HUD::update()"})," ensures live updates of scores, mass, and leaderboard rankings."]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"performance-optimizations",children:"Performance Optimizations"}),"\n",(0,s.jsx)(n.p,{children:"Several optimizations are implemented to ensure smooth rendering:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Batch Rendering"}),": Groups draw calls where possible to minimize overhead."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Frame Rate Limiting"}),": Uses ",(0,s.jsx)(n.code,{children:"setFramerateLimit(144)"})," to cap FPS."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Culling"}),": Only visible objects are drawn to avoid unnecessary computations."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Double Buffering"}),": Uses ",(0,s.jsx)(n.code,{children:"window.display()"})," to ensure smooth frame transitions."]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.strong,{children:"Rendering System"})," provides an optimized, efficient way to display game entities and UI elements, ensuring smooth gameplay and clear visual feedback for the player."]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>d});var r=i(6540);const s={},l=r.createContext(s);function t(e){const n=r.useContext(l);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),r.createElement(l.Provider,{value:n},e.children)}}}]);