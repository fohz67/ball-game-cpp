"use strict";(self.webpackChunkBall_Game_C_Documentation=self.webpackChunkBall_Game_C_Documentation||[]).push([[630],{1614:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"server/network","title":"Network","description":"This document provides an overview of the network architecture used in the Ball Game project. It explains the TCP-based communication, packet structure, message handling, protocol design, and the use of ASIO for networking.","source":"@site/docs/server/network.md","sourceDirName":"server","slug":"/server/network","permalink":"/ball-game-cpp/docs/server/network","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Network","slug":"/server/network"},"sidebar":"tutorialSidebar","previous":{"title":"Overview","permalink":"/ball-game-cpp/docs/server"},"next":{"title":"Components","permalink":"/ball-game-cpp/docs/server/components"}}');var r=s(4848),t=s(8453);const l={title:"Network",slug:"/server/network"},c=void 0,d={},o=[{value:"Overview",id:"overview",level:2},{value:"TCP Communication Model",id:"tcp-communication-model",level:2},{value:"Why TCP?",id:"why-tcp",level:3},{value:"Connection Lifecycle",id:"connection-lifecycle",level:3},{value:"Packet Structure",id:"packet-structure",level:2},{value:"Handling Cut Packets (Packet Fragmentation)",id:"handling-cut-packets-packet-fragmentation",level:3},{value:"Protocol Design",id:"protocol-design",level:2},{value:"OpCodes (Message Types)",id:"opcodes-message-types",level:3},{value:"Serialization with <code>SmartBuffer</code>",id:"serialization-with-smartbuffer",level:3},{value:"Network Thread",id:"network-thread",level:2},{value:"Main Responsibilities:",id:"main-responsibilities",level:3},{value:"How It Works:",id:"how-it-works",level:3},{value:"ASIO and Asynchronous Operations",id:"asio-and-asynchronous-operations",level:2},{value:"Key Features of ASIO:",id:"key-features-of-asio",level:3},{value:"Sending and Receiving Messages",id:"sending-and-receiving-messages",level:2},{value:"Sending Data:",id:"sending-data",level:3},{value:"Receiving Data:",id:"receiving-data",level:3},{value:"Client Allocation and Management",id:"client-allocation-and-management",level:2},{value:"Handling Disconnections",id:"handling-disconnections",level:3},{value:"Summary",id:"summary",level:2}];function a(e){const n={code:"code",h2:"h2",h3:"h3",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["This document provides an overview of the ",(0,r.jsx)(n.strong,{children:"network architecture"})," used in the Ball Game project. It explains the ",(0,r.jsx)(n.strong,{children:"TCP-based communication"}),", ",(0,r.jsx)(n.strong,{children:"packet structure"}),", ",(0,r.jsx)(n.strong,{children:"message handling"}),", ",(0,r.jsx)(n.strong,{children:"protocol design"}),", and the use of ",(0,r.jsx)(n.strong,{children:"ASIO"})," for networking."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsxs)(n.p,{children:["The networking system is responsible for ",(0,r.jsx)(n.strong,{children:"handling client connections, sending and receiving packets, and processing game state updates."})," It is built on ",(0,r.jsx)(n.strong,{children:"ASIO (Boost.Asio)"})," for efficient asynchronous I/O operations and uses ",(0,r.jsx)(n.strong,{children:"TCP"})," for reliable data transmission."]}),"\n",(0,r.jsx)(n.p,{children:"The system consists of:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["A ",(0,r.jsx)(n.strong,{children:"network thread"})," running asynchronously to handle incoming and outgoing messages."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Clients allocation"})," and management."]}),"\n",(0,r.jsxs)(n.li,{children:["A ",(0,r.jsx)(n.strong,{children:"packet system"})," with structured messages and a defined ",(0,r.jsx)(n.strong,{children:"protocol"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Serialization"})," and ",(0,r.jsx)(n.strong,{children:"deserialization"})," using ",(0,r.jsx)(n.code,{children:"SmartBuffer"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"tcp-communication-model",children:"TCP Communication Model"}),"\n",(0,r.jsx)(n.h3,{id:"why-tcp",children:"Why TCP?"}),"\n",(0,r.jsxs)(n.p,{children:["The game uses ",(0,r.jsx)(n.strong,{children:"TCP"})," (Transmission Control Protocol) instead of ",(0,r.jsx)(n.strong,{children:"UDP"})," for network communication due to:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Reliability"}),": TCP ensures all packets arrive ",(0,r.jsx)(n.strong,{children:"in order"})," and ",(0,r.jsx)(n.strong,{children:"without loss"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Built-in congestion control"}),": Prevents overwhelming the network."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Persistent connection"}),": Ideal for ",(0,r.jsx)(n.strong,{children:"real-time state synchronization"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"connection-lifecycle",children:"Connection Lifecycle"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Client requests a connection"})," to the server."]}),"\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.strong,{children:"server accepts the connection"})," and assigns a ",(0,r.jsx)(n.strong,{children:"socket"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.strong,{children:"server and client exchange packets"})," via ",(0,r.jsx)(n.strong,{children:"TCP streams"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["If the client disconnects, the ",(0,r.jsx)(n.strong,{children:"server cleans up resources"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"packet-structure",children:"Packet Structure"}),"\n",(0,r.jsx)(n.p,{children:"Each packet follows a structured format:"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Field"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Size (bytes)"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Size"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"uint32_t"})}),(0,r.jsx)(n.td,{children:"4"}),(0,r.jsx)(n.td,{children:"Size of the full packet (excluding this field)."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"OpCode"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"uint8_t"})}),(0,r.jsx)(n.td,{children:"1"}),(0,r.jsx)(n.td,{children:"Identifies the type of packet."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Payload"})}),(0,r.jsx)(n.td,{children:"Varies"}),(0,r.jsx)(n.td,{children:"Variable"}),(0,r.jsx)(n.td,{children:"The actual packet data."})]})]})]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.strong,{children:"size field (uint32_t)"})," at the start of each packet allows the receiver to determine the ",(0,r.jsx)(n.strong,{children:"full size"})," of the incoming data. This helps in handling ",(0,r.jsx)(n.strong,{children:"packet fragmentation"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"handling-cut-packets-packet-fragmentation",children:"Handling Cut Packets (Packet Fragmentation)"}),"\n",(0,r.jsxs)(n.p,{children:["Since ",(0,r.jsx)(n.strong,{children:"TCP is a stream-based protocol"}),", it does ",(0,r.jsx)(n.strong,{children:"not guarantee"})," that a full packet is received in a single read operation. To handle this, we use:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:["A size field (",(0,r.jsx)(n.code,{children:"uint32_t"}),")"]})," at the start of every packet."]}),"\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.strong,{children:"receiver first reads 4 bytes"})," to determine the ",(0,r.jsx)(n.strong,{children:"expected packet size"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["The receiver then ",(0,r.jsx)(n.strong,{children:"buffers incoming data"})," until the full packet is received."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["This ensures that ",(0,r.jsx)(n.strong,{children:"even if a message is split across multiple TCP segments,"})," it is correctly reconstructed."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"protocol-design",children:"Protocol Design"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.strong,{children:"network protocol"})," defines how ",(0,r.jsx)(n.strong,{children:"messages"})," are structured and exchanged between the server and clients."]}),"\n",(0,r.jsx)(n.h3,{id:"opcodes-message-types",children:"OpCodes (Message Types)"}),"\n",(0,r.jsxs)(n.p,{children:["Each packet has an ",(0,r.jsx)(n.strong,{children:"OpCode"})," (",(0,r.jsx)(n.code,{children:"uint8_t"}),") that determines its ",(0,r.jsx)(n.strong,{children:"purpose"}),". Example OpCodes:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"PINGPONG"})," (0) \u2013 Used for latency measurement."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"JOIN_SERVER"})," (10) \u2013 Sent when a player connects."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"CREATE_PLAYER"})," (20) \u2013 Sent when a new player is created."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"UPDATE_GAME_STATE"})," (40) \u2013 Sends game state updates."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"DELETE_ENTITY"})," (50) \u2013 Notifies the removal of an entity."]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"serialization-with-smartbuffer",children:["Serialization with ",(0,r.jsx)(n.code,{children:"SmartBuffer"})]}),"\n",(0,r.jsxs)(n.p,{children:["The protocol uses a ",(0,r.jsx)(n.strong,{children:"binary format"})," for efficiency. ",(0,r.jsx)(n.code,{children:"SmartBuffer"})," handles ",(0,r.jsx)(n.strong,{children:"serialization (writing)"})," and ",(0,r.jsx)(n.strong,{children:"deserialization (reading)"})," of data."]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Writing a packet:"})," ",(0,r.jsx)(n.code,{children:"smartBuffer << OpCodes::CREATE_PLAYER << playerId << playerName;"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Reading a packet:"})," ",(0,r.jsx)(n.code,{children:"smartBuffer >> opcode >> playerId >> playerName;"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["This makes ",(0,r.jsx)(n.strong,{children:"encoding and decoding packets efficient and flexible"}),"."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"network-thread",children:"Network Thread"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.strong,{children:"network operates on a separate thread"})," to ensure smooth handling of ",(0,r.jsx)(n.strong,{children:"incoming and outgoing messages"})," without blocking the main game loop."]}),"\n",(0,r.jsx)(n.h3,{id:"main-responsibilities",children:"Main Responsibilities:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Accepting new connections."})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Reading packets asynchronously."})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Sending packets efficiently."})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Managing clients and their sockets."})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Handling disconnections."})}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"how-it-works",children:"How It Works:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"asyncAccept()"})})," \u2013 Listens for incoming client connections."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"asyncRead(socket)"})})," \u2013 Reads data from the client."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"handleMessage(socket, buffer)"})})," \u2013 Parses the received packet."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"sendToClient(socket, buffer)"})})," \u2013 Sends data to a specific client."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"sendToAll(buffer)"})})," \u2013 Broadcasts data to all clients."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"asio-and-asynchronous-operations",children:"ASIO and Asynchronous Operations"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.strong,{children:"networking system"})," is built on ",(0,r.jsx)(n.strong,{children:"ASIO"})," for ",(0,r.jsx)(n.strong,{children:"asynchronous, non-blocking I/O"}),". This allows the server to handle ",(0,r.jsx)(n.strong,{children:"multiple connections"})," efficiently."]}),"\n",(0,r.jsx)(n.h3,{id:"key-features-of-asio",children:"Key Features of ASIO:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"asio::ip::tcp::socket"})}),": Represents a connection with a client."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"asio::ip::tcp::acceptor"})}),": Listens for incoming connections."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"async_read_some()"})}),": Reads data asynchronously."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"async_write()"})}),": Sends data without blocking."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["ASIO ensures that the server ",(0,r.jsx)(n.strong,{children:"remains responsive"})," while handling multiple clients."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"sending-and-receiving-messages",children:"Sending and Receiving Messages"}),"\n",(0,r.jsx)(n.h3,{id:"sending-data",children:"Sending Data:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.strong,{children:["Create a ",(0,r.jsx)(n.code,{children:"SmartBuffer"})," instance."]})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Write the OpCode and payload."})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.strong,{children:["Send using ",(0,r.jsx)(n.code,{children:"sendToClient()"})," or ",(0,r.jsx)(n.code,{children:"sendToAll()"}),"."]})}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"SmartBuffer smartBuffer;\nsmartBuffer << OpCodes::CREATE_PLAYER << playerId << playerName;\nNetwork::get().sendToClient(client, smartBuffer);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"receiving-data",children:"Receiving Data:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Read the first 4 bytes"})," (packet size)."]}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Wait until the full packet is received."})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Extract the OpCode."})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Process the message based on its OpCode."})}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'uint8_t opcode;\nsmartBuffer >> opcode;\n\nswitch (static_cast<OpCodes>(opcode)) {\n    case OpCodes::PINGPONG:\n        handlePingPong(client, smartBuffer);\n        break;\n    case OpCodes::JOIN_SERVER:\n        handleJoinServer(client, smartBuffer);\n        break;\n    default:\n        std::cout << "Unknown OpCode received!" << std::endl;\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"client-allocation-and-management",children:"Client Allocation and Management"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.strong,{children:"server maintains a list of connected clients"})," and their associated sockets."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"New clients"})," are stored in a ",(0,r.jsx)(n.code,{children:"std::map"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Each client has a unique ID"})," generated by ",(0,r.jsx)(n.code,{children:"AtomicID"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Disconnected clients are removed"})," from the list and their ID is recycled."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"handling-disconnections",children:"Handling Disconnections"}),"\n",(0,r.jsx)(n.p,{children:"If a client disconnects:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.strong,{children:"socket is closed"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.strong,{children:"player ID is freed"})," using ",(0,r.jsx)(n.code,{children:"AtomicID::removeId()"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.strong,{children:"player\u2019s data is removed"})," from the game state."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Uses TCP"})," for ",(0,r.jsx)(n.strong,{children:"reliable and ordered data transmission"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Handles packet fragmentation"})," using a ",(0,r.jsx)(n.strong,{children:"size-prefixed message format"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Manages network operations asynchronously"})," with ",(0,r.jsx)(n.strong,{children:"ASIO"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Separates networking from gameplay logic"})," with a dedicated ",(0,r.jsx)(n.strong,{children:"network thread"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Uses an OpCode-based protocol"})," for structured messaging."]}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Supports client allocation, disconnection handling, and efficient data sending."})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>c});var i=s(6540);const r={},t=i.createContext(r);function l(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);