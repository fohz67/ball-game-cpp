"use strict";(self.webpackChunkBall_Game_C_Documentation=self.webpackChunkBall_Game_C_Documentation||[]).push([[68],{5026:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"client/network","title":"Client Network","description":"The Client Network module is responsible for handling all network communication between the game client and the server. It manages sending and receiving packets, handling protocol messages, and maintaining a stable connection.","source":"@site/docs/client/network.md","sourceDirName":"client","slug":"/client/network","permalink":"/ball-game-cpp/docs/client/network","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Client Network","slug":"/client/network"},"sidebar":"tutorialSidebar","previous":{"title":"Architecture","permalink":"/ball-game-cpp/docs/client/architecture"},"next":{"title":"Components","permalink":"/ball-game-cpp/docs/client/components"}}');var t=i(4848),r=i(8453);const a={title:"Client Network",slug:"/client/network"},l="Client Network",o={},c=[{value:"Overview",id:"overview",level:2},{value:"Key Responsibilities:",id:"key-responsibilities",level:3},{value:"Connection Handling",id:"connection-handling",level:2},{value:"Initialization",id:"initialization",level:3},{value:"Network Thread",id:"network-thread",level:3},{value:"Sending Data",id:"sending-data",level:2},{value:"Sending a Message",id:"sending-a-message",level:3},{value:"Sending Mouse Position",id:"sending-mouse-position",level:3},{value:"Receiving Data",id:"receiving-data",level:2},{value:"Receiving a Packet",id:"receiving-a-packet",level:3},{value:"Handling Messages",id:"handling-messages",level:3},{value:"Synchronization with Server",id:"synchronization-with-server",level:2},{value:"Error Handling",id:"error-handling",level:2},{value:"Summary",id:"summary",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"client-network",children:"Client Network"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.strong,{children:"Client Network"})," module is responsible for handling all network communication between the game client and the server. It manages sending and receiving packets, handling protocol messages, and maintaining a stable connection."]}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsxs)(n.p,{children:["The network system of the client uses ",(0,t.jsx)(n.strong,{children:"Asio"})," for asynchronous communication, allowing efficient message handling without blocking the main game loop."]}),"\n",(0,t.jsx)(n.h3,{id:"key-responsibilities",children:"Key Responsibilities:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Establishing a connection to the server."}),"\n",(0,t.jsx)(n.li,{children:"Sending data packets using the defined protocol."}),"\n",(0,t.jsx)(n.li,{children:"Receiving and processing messages asynchronously."}),"\n",(0,t.jsx)(n.li,{children:"Managing connection stability and error handling."}),"\n",(0,t.jsx)(n.li,{children:"Synchronizing the game state with the server."}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"connection-handling",children:"Connection Handling"}),"\n",(0,t.jsxs)(n.p,{children:["The client connects to the server by resolving the provided hostname and port. The ",(0,t.jsx)(n.code,{children:"NetworkClient"})," class manages the connection lifecycle."]}),"\n",(0,t.jsx)(n.h3,{id:"initialization",children:"Initialization"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"asio::ip::tcp::resolver resolver(io_context);\nasio::ip::tcp::resolver::results_type endpoints = resolver.resolve(host, std::to_string(port));\nasio::connect(socket, endpoints);\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Resolves the server\u2019s hostname and establishes a connection."}),"\n",(0,t.jsxs)(n.li,{children:["Uses Asio\u2019s ",(0,t.jsx)(n.code,{children:"connect"})," function to bind the socket to the server."]}),"\n",(0,t.jsxs)(n.li,{children:["Once connected, the ",(0,t.jsx)(n.strong,{children:"network thread"})," is started for continuous message handling."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"network-thread",children:"Network Thread"}),"\n",(0,t.jsx)(n.p,{children:"A dedicated thread listens for incoming packets:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"networkThread = std::thread(&NetworkClient::receive, this);\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Ensures non-blocking network operations."}),"\n",(0,t.jsx)(n.li,{children:"Listens for messages from the server."}),"\n",(0,t.jsx)(n.li,{children:"Forwards data to the protocol handler for processing."}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"sending-data",children:"Sending Data"}),"\n",(0,t.jsxs)(n.p,{children:["Messages are sent using the ",(0,t.jsx)(n.strong,{children:"SmartBuffer"})," system, ensuring efficient serialization."]}),"\n",(0,t.jsx)(n.h3,{id:"sending-a-message",children:"Sending a Message"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"SmartBuffer smartBuffer;\nsmartBuffer << OpCodes::PINGPONG;\nNetworkClient::get().send(smartBuffer);\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Constructs a packet with an ",(0,t.jsx)(n.strong,{children:"OpCode"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Serializes it into a ",(0,t.jsx)(n.code,{children:"SmartBuffer"}),"."]}),"\n",(0,t.jsx)(n.li,{children:"Sends it over the socket."}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"sending-mouse-position",children:"Sending Mouse Position"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"const sf::Vector2i mousePos = sf::Mouse::getPosition(window);\nconst sf::Vector2u windowSize = window.getSize();\nSmartBuffer smartBuffer;\nsmartBuffer << OpCodes::UPDATE_MOUSE_POSITION << normalizedX << normalizedY;\nNetworkClient::get().send(smartBuffer);\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Captures the mouse position relative to the screen."}),"\n",(0,t.jsx)(n.li,{children:"Normalizes values between -1 and 1."}),"\n",(0,t.jsx)(n.li,{children:"Sends the data to the server for movement updates."}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"receiving-data",children:"Receiving Data"}),"\n",(0,t.jsxs)(n.p,{children:["Data is received asynchronously and handled in ",(0,t.jsx)(n.strong,{children:"ProtocolClient"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"receiving-a-packet",children:"Receiving a Packet"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"uint32_t packetSize;\nasio::read(socket, asio::buffer(&packetSize, sizeof(packetSize)));\nstd::vector<uint8_t> buffer(packetSize);\nasio::read(socket, asio::buffer(buffer.data(), packetSize));\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Reads the ",(0,t.jsx)(n.strong,{children:"packet size"})," first."]}),"\n",(0,t.jsx)(n.li,{children:"Allocates memory based on the expected size."}),"\n",(0,t.jsx)(n.li,{children:"Reads the full message into a buffer."}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"handling-messages",children:"Handling Messages"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"uint8_t opcode;\nsmartBuffer >> opcode;\nswitch (static_cast<OpCodes>(opcode))\n{\n    case OpCodes::CREATE_WORLD:\n        ReadClient::readCreateWorld(smartBuffer);\n        break;\n    case OpCodes::UPDATE_PLAYER:\n        ReadClient::readUpdatePlayer(smartBuffer);\n        break;\n}\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Extracts the ",(0,t.jsx)(n.strong,{children:"OpCode"})," from the packet."]}),"\n",(0,t.jsxs)(n.li,{children:["Routes the message to the appropriate handler in ",(0,t.jsx)(n.strong,{children:"ReadClient"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"synchronization-with-server",children:"Synchronization with Server"}),"\n",(0,t.jsx)(n.p,{children:"The client continuously syncs its game state with the server."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Game entities are updated"})," based on received messages."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Leaderboard updates"})," reflect real-time score changes."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Mouse input"})," is sent in real-time for smooth movement."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,t.jsx)(n.p,{children:"If an error occurs during connection or data transfer, the client logs the issue and attempts to recover:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:'catch (const std::exception& e)\n{\n    std::cerr << "Network error: " << e.what() << std::endl;\n    exit(0);\n}\n'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"If a critical failure occurs, the client terminates safely."}),"\n",(0,t.jsx)(n.li,{children:"In case of connection loss, the client may attempt to reconnect (future implementation)."}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,t.jsxs)(n.p,{children:["The client network module efficiently manages communication with the server using Asio. It ensures a ",(0,t.jsx)(n.strong,{children:"smooth gameplay experience"})," by handling network messages asynchronously, reducing latency, and keeping game entities synchronized with the server state."]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>l});var s=i(6540);const t={},r=s.createContext(t);function a(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);