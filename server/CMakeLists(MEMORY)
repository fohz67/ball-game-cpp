cmake_minimum_required(VERSION 3.20)
project(server)

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

option(ENABLE_ASAN "Enable AddressSanitizer" ON)
option(ENABLE_UBSAN "Enable UndefinedBehaviorSanitizer" ON)
option(ENABLE_TSAN "Enable ThreadSanitizer" OFF)
option(ENABLE_MSAN "Enable MemorySanitizer" OFF)

file(GLOB_RECURSE SOURCES src/*.cpp src/**/*.cpp)
file(GLOB_RECURSE HEADERS include/*.hpp include/**/*.hpp)

add_executable(Server ${SOURCES} ${HEADERS})

target_include_directories(
  Server
  PUBLIC
    include
    ${CMAKE_SOURCE_DIR}/smart-buffer-cpp/include
    ${CMAKE_SOURCE_DIR}/asio/asio/include
)

target_link_libraries(Server smart_buffer)

if(CMAKE_CXX_COMPILER_ID MATCHES "Clang|GNU")
  set(SANITIZER_FLAGS "")

  if(ENABLE_ASAN)
    list(APPEND SANITIZER_FLAGS "address")
  endif()

  if(ENABLE_UBSAN)
    list(APPEND SANITIZER_FLAGS "undefined")
  endif()

  if(ENABLE_TSAN)
    if(SANITIZER_FLAGS)
      message(WARNING "ThreadSanitizer (tsan) is not recommended to be combined with other sanitizers. Using only tsan.")
      set(SANITIZER_FLAGS "thread")
    else()
      list(APPEND SANITIZER_FLAGS "thread")
    endif()
  endif()

  if(ENABLE_MSAN)
    if(SANITIZER_FLAGS)
      message(FATAL_ERROR "MemorySanitizer (msan) cannot be combined with other sanitizers.")
    else()
      list(APPEND SANITIZER_FLAGS "memory")
    endif()
  endif()

  if(SANITIZER_FLAGS)
    string(JOIN "," SANITIZER_FLAGS_COMBINED ${SANITIZER_FLAGS})
    message(STATUS "Enabling sanitizers: ${SANITIZER_FLAGS_COMBINED}")
    target_compile_options(Server PRIVATE -fsanitize=${SANITIZER_FLAGS_COMBINED} -fno-omit-frame-pointer)
    target_link_options(Server PRIVATE -fsanitize=${SANITIZER_FLAGS_COMBINED})
  endif()
endif()